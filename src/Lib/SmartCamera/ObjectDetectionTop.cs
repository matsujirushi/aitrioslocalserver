// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SmartCamera
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ObjectDetectionTop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_1_24(); }
  public static ObjectDetectionTop GetRootAsObjectDetectionTop(ByteBuffer _bb) { return GetRootAsObjectDetectionTop(_bb, new ObjectDetectionTop()); }
  public static ObjectDetectionTop GetRootAsObjectDetectionTop(ByteBuffer _bb, ObjectDetectionTop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyObjectDetectionTop(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ObjectDetectionTopVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObjectDetectionTop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SmartCamera.ObjectDetectionData? Perception { get { int o = __p.__offset(4); return o != 0 ? (SmartCamera.ObjectDetectionData?)(new SmartCamera.ObjectDetectionData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<SmartCamera.ObjectDetectionTop> CreateObjectDetectionTop(FlatBufferBuilder builder,
      Offset<SmartCamera.ObjectDetectionData> perceptionOffset = default(Offset<SmartCamera.ObjectDetectionData>)) {
    builder.StartTable(1);
    ObjectDetectionTop.AddPerception(builder, perceptionOffset);
    return ObjectDetectionTop.EndObjectDetectionTop(builder);
  }

  public static void StartObjectDetectionTop(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPerception(FlatBufferBuilder builder, Offset<SmartCamera.ObjectDetectionData> perceptionOffset) { builder.AddOffset(0, perceptionOffset.Value, 0); }
  public static Offset<SmartCamera.ObjectDetectionTop> EndObjectDetectionTop(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SmartCamera.ObjectDetectionTop>(o);
  }
  public static void FinishObjectDetectionTopBuffer(FlatBufferBuilder builder, Offset<SmartCamera.ObjectDetectionTop> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedObjectDetectionTopBuffer(FlatBufferBuilder builder, Offset<SmartCamera.ObjectDetectionTop> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ObjectDetectionTopT UnPack() {
    var _o = new ObjectDetectionTopT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ObjectDetectionTopT _o) {
    _o.Perception = this.Perception.HasValue ? this.Perception.Value.UnPack() : null;
  }
  public static Offset<SmartCamera.ObjectDetectionTop> Pack(FlatBufferBuilder builder, ObjectDetectionTopT _o) {
    if (_o == null) return default(Offset<SmartCamera.ObjectDetectionTop>);
    var _perception = _o.Perception == null ? default(Offset<SmartCamera.ObjectDetectionData>) : SmartCamera.ObjectDetectionData.Pack(builder, _o.Perception);
    return CreateObjectDetectionTop(
      builder,
      _perception);
  }
}

public class ObjectDetectionTopT
{
  [Newtonsoft.Json.JsonProperty("perception")]
  public SmartCamera.ObjectDetectionDataT Perception { get; set; }

  public ObjectDetectionTopT() {
    this.Perception = null;
  }

  public static ObjectDetectionTopT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectDetectionTopT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ObjectDetectionTopT DeserializeFromBinary(byte[] fbBuffer) {
    return ObjectDetectionTop.GetRootAsObjectDetectionTop(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ObjectDetectionTop.FinishObjectDetectionTopBuffer(fbb, ObjectDetectionTop.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ObjectDetectionTopVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Perception*/, SmartCamera.ObjectDetectionDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
